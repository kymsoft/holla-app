// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  isOnline  Boolean   @default(false)
  lastSeen  DateTime?
  socketId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions      Session[]
  messages      Message[]
  participants  Participant[]
  messageStatus MessageStatus[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants Participant[]
}

model Participant {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sender       User           @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  status       MessageStatus[]
}

model MessageStatus {
  id          String    @id @default(cuid())
  messageId   String
  userId      String
  status      String    // sent, delivered, read
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime  @default(now())

  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}
